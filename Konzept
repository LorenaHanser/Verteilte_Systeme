Client meldet sich am Server an.
Client teilt dem Server mit, in welchen Chat er möchte.
Server verbindet den Clienten mit seinem Parnter (wenn online) und sendet ihm den Chatverlauf aus der Datei zu. (siehe Filemanagement)
  Wenn Chatpartner nicht online ist, kann der Server dem Clienten Schreiben, dass sein Partner nicht online ist. Chat wird trotzdem in Datei gespeichert.
  
  Filemanagement:
    Chatverläufe werden für jeweiligen Chaträume (Lorena mit Daniel, Daniel mit David, Lorena mit David) anglegt -> Also eine Datei für einen Chat = 3 Chatdateien
    
Syntax (Naming Conventions) mit Beispiel "Daniel":
CONNECT Daniel    // Verbindung zum Chatraum mit Daniel aufbauen <- deprecated: User wird gefragt wem er schreiben möchte!
DISCONNECT        // Verbindung zum Chatraum mit Daniel schließen
SHUTDOWN          // Verbindung zum Server schließen

Filenames:
DanielDavid.txt
DanielLorena.txt
DavidLorena.txt

ID's:
Daniel = 0;
David = 1;
Lorena = 2;

Passwörter:
Daniel = hallo
David = geheim
Lorena = test

Ports:
Adresse: localhost
Server1:
  FürClienten: 8988
  FürServer: 8991
Server2:
  Für Clienten: 8989
  Für Server: 8992
Server3:
  Für Clienten: 8990
  Für Server: 8993

Im Chatfile:
[06.04.2023 17:01:12] [Daniel]: Nachricht

Fragen für Fragestunde
- identischer Chatverlauf: Brauchen wir pro Server eine .txt Datei vom Chat oder insgesamt nur eine?
- import java.text.SimpleDateFormat? import java.sql.Timestamp?
- synchornisation? reicht das wie wir es bisher haben oder delay wichtig zu berücksichtigen? 
- mcs strategie: geht's darum das bei 3 Servern bei Schreibzugriff/Lesezugriff die Mehrheit schreibt also 2/3 schreiben/lesen müssen
- gibt es die möglichkeit, dass beide server nachrichten haben die der andere nicht hat?	oder kann man es lösen das der chatverlauf des laufenden servers mit dem des neu zugeschalteten servers synchronisiert wird?
- Lastverteilung: reicht Math.random() oder abhängig von der Anzahl der Clients und Server?
- Passwörter hashen?

